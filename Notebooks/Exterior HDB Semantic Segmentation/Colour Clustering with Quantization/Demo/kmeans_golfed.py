!pip install colour-science
import numpy as np,matplotlib.pyplot as plt, colour, functools, cv2, sklearn.cluster as skcluster
alter = lambda img, value: cv2.cvtColor(cv2.merge((lambda h,s,v: (h,s,np.where((v+value >= 0)&(v+value <= 255), v, v+value)))(*cv2.split(cv2.cvtColor(img, cv2.COLOR_BGR2HSV)))), cv2.COLOR_HSV2BGR)
cluster = lambda image,clusters:((lambda image, clf: (lambda labels:cv2.cvtColor(clf.cluster_centers_.astype("uint8")[labels].reshape(image.shape), cv2.COLOR_LAB2BGR, cv2.CV_8U))(clf.fit_predict(image.reshape(-1, 3))))(cv2.cvtColor(image, cv2.COLOR_BGR2LAB), skcluster.MiniBatchKMeans(n_clusters=clusters, batch_size=4096)))
cluster_brightened = lambda image, clusters, lighten_value, darken_value: alter(cluster(alter(image, lighten_value), clusters), -darken_value)
standardise_colours = lambda quantized_image: cv2.cvtColor(functools.reduce(lambda quantized_image,i:np.where(np.stack([np.any(quantized_image == functools.reduce(lambda x, j: (colour.delta_E(i, j), j) if(colour.delta_E(i, j) < x[0]) else x, np.unique(quantized_image.reshape(-1, 3), axis=0), (float("inf"), 0))[-1], axis=-1)]*3, axis=-1), np.full(quantized_image.shape,i), quantized_image), cv2.cvtColor(np.array([[[127,127,127],[128,0,0],[0,0,128]]], np.uint8), cv2.COLOR_BGR2LAB)[0], cv2.cvtColor(quantized_image, cv2.COLOR_BGR2LAB)), cv2.COLOR_LAB2BGR, cv2.CV_8U)
cluster_test = lambda clustering_function, lighten_value, darken_value: (lambda fig,axes:[[axes[i, j].imshow(img) for j,img in (lambda img: (lambda img, q: list(enumerate((img, q, standardise_colours(q)))))(img, clustering_function(img, 3, lighten_value, darken_value)))(cv2.imread(f"image_{i}.png"))] for i in range(4)] and fig.tight_layout())(*plt.subplots(4,3,figsize=(9,10)))
